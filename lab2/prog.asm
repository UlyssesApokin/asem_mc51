up		equ p1.0	;кнопка запуска
stop	equ p1.1	;кнопка останов
ecw		equ p1.2	;движение перекл-я по ч.с. (engine clockwise)
eccw	equ p1.3	;движение перкл-я против ч.с. (engine counterclockwise)
conv	equ p1.4	;движение конвейера с заготовками
					;
std		equ p2		;вывод МК для сообщения об ошибках и выводе информации
					;ИСП-ТЬ ТОЛЬКО ПИНЫ 4 -- 7 !
d1		equ p2.0	;датчик d1 (кол-во заготовок)
d2		equ p2.1	;датчик d2 (первое положение)
d3		equ p2.2	;датчик d3 (второе положение)
d4		equ p2.3	;датчик d4 (третье положение)
c_src	equ r0		;регистр для хранения кол-ва заготовок (counter of source)
dest	equ r1		;регистр для хранения номера положения (destination)
N_src	equ 5		;кол-во заготовок, кот. должно пройти в одном напр-ии
;==============================================================================
;	up(stop) := 1 -- кнопка НЕ нажата
;	up(stop) := 0 -- кнопка нажата
;==============================================================================

;==============================================================================
;	d1 := 1 -- заготовки нет
;	d1 := 0 -- заготовка обнаружена
;------------------------------------------------------------------------------
;	d(2..4) := 1 -- перекл-ь НЕ в этом положении
;	d(2..4) := 0 -- перекл-ь в этом положении
;------------------------------------------------------------------------------
;	ecw := 0 --	перекл-ь движется по ч.с
;	ecw := 1 -- перекл-ь покоится
;	ecс := 0 --	перекл-ь движется против ч.с
;	ecс := 1 -- перекл-ь покоится
;------------------------------------------------------------------------------
;	conv := 0 -- конвейер включен
;	conv := 1 -- конвейер покоится
;==============================================================================

;==============================================================================
;	dest := 0000 0000 -- положение перекл-я неизвестно
;	dest := 0000 0001 -- перекл-ь в 1-м положении (1)
;	dest := 0000 0010 -- перекл-ь в 2-м положении (2)
;	dest := 0000 0011 -- перекл-ь в 3-м положении (3)
;==============================================================================
		org 0
		ljmp ST
		org 50
;==============================================================================
;	инициализация данных
;==============================================================================
ST:		mov c_src, #0		;кол-во заготовок равно нолю
		mov dest, #0		;положение переключателя неизвестно (все биты ноли)
		setb eccw			;перекл-ь покоится
		setb ecw			;перекл-ь покоится
		setb conv			;конвейер покоится
;==============================================================================
;	узнать положение переключателя после включения
;==============================================================================
		jnb d2, IS_D2		;если перекл-ь в положении 1 (датчик d2), перейти
							;по метке IS_D2, иначе выполнить след. команду
		jnb d3, IS_D3		;если перекл-ь в положении 2 (датчик d3), перейти
							;по метке IS_D3, иначе выполнить след. команду
		jnb d4, IS_D4		;если перекл-ь в положении 3 (датчик d4), перейти
							;по метке IS_D4, иначе выполнить след.команду
		lcall ERR			;перем-м перекл-ь принудительно в 1-е положение
;==============================================================================
;	запомнить положение переключателя
;==============================================================================
IS_D2:	mov dest, #1		;занести в рег-р хранения положения номер текущего
							;положения переключателя
		sjmp BEGIN			;переход на метку
;------------------------------------------------------------------------------
IS_D3:	mov dest, #2		;занести в рег-р хранения положения номер текущего
							;положения переключателя
		sjmp BEGIN			;переход на метку
;------------------------------------------------------------------------------
IS_D4:	mov dest, #3		;занести в рег-р хранения положения номер текущего
							;положения переключателя
		sjmp BEGIN			;переход на метку
;==============================================================================
;	ожидание начала работы
;==============================================================================
BEGIN:	setb conv			;выключение конвейера
		jb up, $			;если кнопка СТАРТ НЕ нажата, то ожидание нажатия,
							;иначе переход к следующей команде
THEN:	mov c_src, #0		;обнуления счетчика заготовок
		clr conv			;включение конвейера
PAUSE:	jnb stop, BEGIN		;если кнопка СТОП нажата, перейти к метке BEGIN,
							;иначе переход к след. команде
;==============================================================================
;	перемещение деталей
;==============================================================================
	cjne r1, #N_src, NSEQ	;если кол-во прошедших заготовок не равно
							;N_src, то переход по метке, иначе выполнение
							;след. команды
;------------------------------------------------------------------------------
;	если кол-во прошедших заготовок равно N_src (определение)
;------------------------------------------------------------------------------
		ljmp SEQ			;Source Equal
;------------------------------------------------------------------------------
;	если кол-во прошедших заготовок НЕ равно N_src
;------------------------------------------------------------------------------
NSEQ:	jb d1, $		;если заготовки нет, то ожидать появления заготовки,
						;иначе переход к след.команде
		jnb d1, $		;пока заготовка ещё под датчиком, ожидаем её
						;исчезновения, после чего переход к след. команде
		inc c_src		;увеличить счетчик заготовок на 1
		mov std, c_src	;вывести инф-ию о кол-ве заготовок в инф-ый порт
		ljmp PAUSE		;проверить не нажата ли кнопка СТОП и прод-ь вып-е
;==============================================================================
;	если кол-во прошедших заготовок равно N_src (реализация)
;==============================================================================
SEQ:	setb conv			;выключаем конвейер
		mov ACC, dest		;перемещаем номер положение в аккамулятор, чтобы
							;можно было исп-ь jb
;------------------------------------------------------------------------------
							;если в третьем положении (0000 0011)
							;перейти по метке, иначе след. команда

		jb ACC.6, TT1		;(проверка первого бита)
		sjmp TT2			;(если первый бит не совпал, то второй можно не
							;проверять, переход к след. случаю)
TT1:	jb ACC.7, CASE3		;(проверка второго бита)
;------------------------------------------------------------------------------
TT2:	jb ACC.7, CASE1		;если в первом положении  (0000 0001)
							;перейти по метке, иначе след. команда
;------------------------------------------------------------------------------
		jb ACC.6, CASE2		;если в втором положении  (0000 0010)
							;перейти по метке, иначе след. команда
		lcall ERR			;перем-м перекл-ь принудительно в 1-е положение
;------------------------------------------------------------------------------
CASE1:	jb d3, MVCW1	;если не достиг из первого полож-я второго, то переход
						;по метке, иначе выключить переключатель
		setb ecw		;выключение вращения по часовой
		inc dest		;увеличиваем счетчик положения
		ljmp THEN		;выход из цикла
MVCW1:	clr ecw			;включить вращение по часовой
		call SAFE		;вызов функции проверки нажатия кнопки СТОП
		ljmp CASE1		;повторение цикла
;------------------------------------------------------------------------------
CASE2: jb d4, MVCW2		;если не достиг из второго полож-я третьего, то 
						;переход по метке, иначе выключить переключатель
		setb ecw		;выключение вращения по часовой
		inc dest		;увеличиваем счетчик положения
		ljmp THEN		;выход из цикла
MVCW2:	clr ecw			;включить вращение по часовой
		call SAFE		;вызов функции проверки нажатия кнопки СТОП
		ljmp CASE2		;повторение цикла
;------------------------------------------------------------------------------
CASE3: jb d2, MVCCW		;если не достиг из третьего полож-я первого, то
						;переход по метке, иначе выключить переключатель
		setb eccw		;выключение вращения против часовой
		mov dest, #1	;после перемещения перекл-ь окажется в 1-м положении,
						;что и фиксируем
		ljmp THEN		;выход из цикла
MVCCW:	clr eccw		;включить вращение против часовой
		call SAFE		;вызов функции проверки нажатия кнопки СТОП
		ljmp CASE3		;повторение цикла
;------------------------------------------------------------------------------

;==============================================================================
;	ПРОЦЕДУРА БЕЗУСЛОВНОГО ВОЗВРАТА В ПЕРВОЕ ПОЛОЖЕНИЕ
;==============================================================================
;------------------------------------------------------------------------------
;	если ни один из датчиков положения не сработал, необходимо вернуть
;	перекл-ь в первое положение
;------------------------------------------------------------------------------
ERR: jb d2, TURNF		;если не достиг первого положения, то
						;переход по метке, иначе след. команда
		setb eccw		;выключение вращения против часовой
		mov dest, #1	;после перемещения перекл-ь окажется в 1-м положении,
						;что и фиксируем
		ljmp BEGIN		;выход из цикла
TURNF:	clr eccw		;включить вращение против часовой
		call SAFE		;вызов функции проверки нажатия кнопки СТОП
		ljmp ERR		;повторение цикла


;==============================================================================
;	ПРОЦЕДУРА ПРОВЕРКИ НАЖАТИЯ КНОПКИ СТОП
;==============================================================================
SAFE:	jb stop, S_EX	;если кнопка не нажата, завершить подпрограмму, иначе
						;след. команда
		jb up, $		;ожидать нажатие кнопки СТАРТ, иначе след. ком.
		mov c_src, #0	;обнулить счетчик заготовок
S_EX:	ret


;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FIN:
		end
